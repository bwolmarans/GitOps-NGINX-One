user  nginx;

########################
#
# Demo 7/18/2025   .
#
########################

worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
#pid        /var/run/nginx.pid;

# is this enough connections?

events {
    worker_connections 512;
}

http {
    include       /etc/nginx/mime.types;

    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                  '$status $body_bytes_sent "$http_referer" '
                  '"$http_user_agent" "$http_x_forwarded_for" '
                  '"$bytes_sent" "$request_length" "$request_time" '
                  '"$gzip_ratio" $server_protocol ';

    access_log  /var/log/nginx/access.log  main;

    sendfile        off;

    keepalive_timeout  65;

    proxy_cache_path /data/nginx/cache_backend1 keys_zone=cache_backend1:10m;
    proxy_cache_path /data/nginx/cache_backend2 keys_zone=cache_backend2:10m;

    proxy_buffering off;
    #gzip on;

    server {
        listen 443 ssl;
        ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_ciphers !NULL:!LOW:!EXPORT:!MD5:3DES:!aNULL:!eNULL:!ADH:HIGH;
        ssl_certificate /etc/nginx/ssl/cert-10-days.crt;
        ssl_certificate_key /etc/nginx/ssl/cert-10-days.key;

    }

    server {
        server_name test2;
        listen 4434 ssl default_server;
        ssl_protocols TLSv1.1 TLSv1.2 TLSv1.3;
        ssl_ciphers !NULL:!LOW:!EXPORT:!MD5:!aNULL:!eNULL:!ADH:HIGH;
        ssl_certificate /etc/nginx/ssl/cert-45-days.crt;
        ssl_certificate_key /etc/nginx/ssl/cert-45-days.key;

    }

    server {
        server_name test3;
        listen 4438 ssl default_server;
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers !NULL:!LOW:!EXPORT:!MD5:!aNULL:!eNULL:!ADH:HIGH;
        ssl_certificate /etc/nginx/ssl/cert-200-days.crt;
        ssl_certificate_key /etc/nginx/ssl/cert-200-days.key;

    }
    server {
        server_name api
        listen 127.0.0.1:8080;
        location /api {
            api write=on;
            allow 127.0.0.1;
            deny all;
        }
    }

    server {
        server_name my_server;
        listen 9091 default_server;
        return 200 "Greetings. hello from http workload 1 \n";
    }
    server {
        server_name 9093
        listen 9092 default_server;
        return 200 "hello from http workload 2 \n";
    }
    server {
        server_name 9093
        listen 9093 default_server;
        return 200 "hello from stream workload 1 \n";
    }

    upstream nginx1 {
        server 127.0.0.1:9091;
        zone my_backend1 1000000;
        keepalive 32;
        queue 10;
    }
    upstream nginx2 {
        server 127.0.0.1:9092;
        zone my_backend2 1000000;
        keepalive 32;
        queue 20;
    }

    server {
        server_name server99;
        status_zone my_frontend1;
        listen 127.0.0.1:8087 default_server;
        location /frontend1 {
            proxy_pass http://nginx1;
            proxy_set_header Host $host;
            proxy_cache cache_backend1;
            status_zone my_location_zone;

        }
    }
    server {
        server_name server7;
        status_zone my_frontend2;
        listen 127.0.0.1:8082 default_server;
        location /frontend2 {
            proxy_pass http://nginx2;
            proxy_set_header Host $host;
            proxy_cache cache_backend2;
            status_zone my_location_zone;

        }
    }
    server {
       listen 127.0.0.1:80 default_server;
       server_name 127.0.0.1;
       location /nginx_status {
          stub_status on;
          allow 127.0.0.1;
          deny all;
       }

        location /api {
            api write=on;
            allow 127.0.0.1;
            deny  all;
        }
    }

    include /etc/nginx/conf.d/*.conf;
}

stream {

    upstream nginx3 {
        zone my_stream_backend 64k;
        server 127.0.0.1:9093;
    }

    log_format basic '$remote_addr [$time_local] '
                     '$protocol $status $bytes_sent $bytes_received '
                     '$session_time';
    access_log /var/log/nginx/access.log basic;

    server {
        listen 8083;
        status_zone tcp_stream_server;
        proxy_pass nginx3;
    }
}


